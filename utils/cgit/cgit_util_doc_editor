#!/usr/bin/env python3.8

# about: Editor for template comments

import PySimpleGUI as sg
from tkinter import Tk


def format_comment(lines, open_comment, close_comment):
    """takes in the lines from the GUI and formats as comments"""

    output = ""

    # Calculate length of the biggest line
    max_len = 70
    for line in lines:
        this_len = len(line)
        if this_len > max_len:
            max_len = this_len

    # Create top and bottom line
    filler = "".join("-" for _ in range(max_len))
    outside_line = f"{open_comment}-{filler}-{close_comment}\n"

    # Add top lines
    output += outside_line
    output += f"{open_comment} {' ': <{max_len}} {close_comment}\n"

    # fill in middle bit
    for line in lines:
        output += f"{open_comment} {line: <{max_len}} {close_comment}\n"

    # Add bottom lines
    output += f"{open_comment} {' ': <{max_len}} {close_comment}\n"
    output += outside_line

    return output


def handle_copy(values):
    """handle the copy button being pressed - format and put data onto clipboard"""

    # build formatted output
    lines = values["-IN-"].split("\n")

    # Default to template comments
    open_comment = "{#"
    close_comment = "#}"

    if values["-html-"]:
        open_comment = "<!--"
        close_comment = "-->"

    output = format_comment(lines, open_comment, close_comment)

    # Use tkinter to copy to clipboard
    root = Tk()
    root.withdraw()
    root.clipboard_clear()
    root.clipboard_append(output)
    root.update()  # now it stays on the clipboard after the window is closed
    root.destroy()


def handle_paste(window, values):
    """handle the paste button being pressed - remove comments and update UI

    This is intended to handle pasting our output back into the window to edit later, ie it removes
    the comment formatting to give the user just the raw text.

    """

    # Get clipboard data
    root = Tk()
    root.withdraw()
    data = root.clipboard_get()

    # Remove comments
    new_data = ""
    lines = data.split("\n")

    if lines[0].find("{#---") == -1:
        # Not our formatted data
        new_data = data

    else:
        # Likely to be our format - remove top 2 lines and bottom 4
        lines = lines[2:-4]

        for line in lines:
            for unwanted_char in ["{", "}", "#"]:
                line = line.replace(unwanted_char, "")
            line = line.strip()
            new_data += line

    # Update UI
    text_field = window["-IN-"]
    text_field.update(value=new_data)
    # text_field.Widget.xview("end")


def main():
    """Main function"""

    # Theme
    sg.theme("DarkBlue10")

    # Screen layout
    layout = [
        [sg.Text("Enter comments to format", font="Verdana 16 bold")],
        [sg.Multiline(size=(80, 40), font="Verdana 16", key="-IN-")],
        [
            sg.Radio(
                "Template Comment",
                "RADIO1",
                default=True,
                key="-template-",
                font="Verdana 14",
            ),
            sg.Radio(
                "HTML Comment", "RADIO1", default=False, key="-html-", font="Verdana 14"
            ),
        ],
        [
            sg.Button("Copy", font="Verdana 16 bold"),
            sg.Button("Paste", font="Verdana 16 bold"),
            sg.Button("Exit", font="Verdana 16 bold"),
        ],
    ]

    # Create window
    window = sg.Window("Template Doco Generator", layout, icon="docs/images/cobalt.ico")

    # Main loop
    while True:
        event, values = window.read()
        if event in [sg.WIN_CLOSED, "Exit"]:
            break

        elif event == "Copy":
            handle_copy(values)

        elif event == "Paste":
            handle_paste(window, values)

    window.close()


if __name__ == "__main__":
    main()
