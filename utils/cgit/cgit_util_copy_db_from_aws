#!/bin/bash

# about: Copy Test or UAT database to development

if [ $# -ne 1 ];then
  echo ""
  echo ""
  echo "Usage: $0 env"
  echo "e.g. $0 cobalt-test-black"
 exit 1
fi

ENV=$1
DUMP_FILE="/tmp/dbdump"

# Prevent pager output from AWS CLI
export AWS_PAGER=""

# Override some vars
export RDS_DB_NAME=prod_load

# get variables from EB
export PGPASSWORD=$(eb printenv $ENV | grep RDS_PASSWORD | awk '{print $3}')
POSTGRES_DB=$(eb printenv $ENV | grep RDS_DB_NAME | awk '{print $3}')

# Hardcode the ones that are unlikely to change and aren't passwords
REMOTE_HOSTNAME="cobalt-test.c97jawiow7ed.ap-southeast-2.rds.amazonaws.com"
POSTGRES_USER="postgres"

# Update the firewall rule so we can connect if local IP had changed
IP=$(curl -s https://ident.me)
echo "Local IP address is: $IP"

aws ec2 modify-security-group-rules \
   --group-id sg-e6b3fd98 \
   --security-group-rules SecurityGroupRuleId=sgr-0c304f0cc65379e9c,SecurityGroupRule="{Description='Dynamic',IpProtocol=-1,CidrIpv4=$IP/32}"

# Dump database - requires firewall rule to be in place
pg_dump --exclude-table-data "public.notifications_abstractemail" --exclude-table-data "public.post_office_*" -h $REMOTE_HOSTNAME -p 5432 -d $POSTGRES_DB -U $POSTGRES_USER -F c -b -v -f $DUMP_FILE

# Load the database
echo "Loading database, dropping old DB..."
cat << EOF > /tmp/drop_db_prod_copy
\c postgres
SELECT pg_terminate_backend(pid)                                                                                                        FROM pg_stat_activity                                                                                                                              WHERE datname = 'prod_load';
drop database IF EXISTS $RDS_DB_NAME;
create database $RDS_DB_NAME with owner cobalt;
EOF

psql </tmp/drop_db_prod_copy

# Load the database
echo "Loading the data, this will take a while..."
pg_restore -h localhost -p 5432 -U guthrie -d prod_load --no-owner --no-privileges --role=cobalt -v $DUMP_FILE

# sanitise data
./manage.py sanitise_production_data_for_testing