#!/bin/bash

# about: works out what branch an environment is running

# Find the branch installed in an environment
# use tail -1 to get the environment or UNSET from a script

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY

if [ $# -ne 1 ]
 then

# Prompt for environment if not provided as a parameter

  PS3='Choose an environment to compare to: '
  options=("test" "uat" "production" "Quit")
  select opt in "${options[@]}"
  do
      case $opt in
          "test")
              ENV="test"
              break
              ;;
          "uat")
              ENV="uat"
              break
              ;;
          "production")
              ENV="production"
              break
              ;;
          "Quit")
              exit
              ;;
          *) echo "invalid option $REPLY";;
      esac
  done

else
  ENV=$1   # Passed as parameter
fi

echo "Getting current $ENV branch..."

# get full name of environment e.g. test -> cobalt-test-black
THISENV=$(eb list | grep $CGIT_ENV-$ENV | tr \* " ")

echo "EB Name: $THISENV..."

# Get the deployed version on this environment
APP=$(eb status $THISENV | grep Deploy | awk '{print $3}')

echo "Deployed app: $APP..."

# Get the description from aws cli
DESC=$(aws elasticbeanstalk describe-application-versions --version-labels "$APP" | grep Description | awk '{print $2}' | tr -d '"' | tr -d ,)

echo "Description: $DESC..."

if [ "$DESC" == "" ]
then
  echo ""
  echo "ERROR!!!"
  echo "========"
  echo "Unable to get the version of code running in $ENV from AWS."
  echo "This could be because there have been too many release done since $ENV was last updated."
  echo "AWS only keeps a certain number of application versions."
  echo "You can run cgit_util_compare instead using the branch rather than the environment."
  echo ""
  exit 1
fi

# Now we should have branch@time - we just want branch
THISBRANCHLONG=$(echo $DESC | tr '@' ' ' | awk '{print $1}')

# we will either have release/1.1.1 or release/1.1.1-somefix or develop
RELEASE=$(echo $THISBRANCHLONG|cut -d/ -f2 -s)

if [ -z $RELEASE ]
then
  THISBRANCH=$THISBRANCHLONG
else
  THISBRANCH="release/$RELEASE"
fi

echo "$ENV is running $THISBRANCH. This assumes cgit has been used for deployment"

echo "Getting $THISBRANCH..."
git fetch origin $THISBRANCH:$THISBRANCH

echo "Found a branch for this environment:"
# Scripts use this last line
echo $THISBRANCH