#!/bin/bash

# about: rebuild test data on Test or UAT
# This used to be easier but now you need to switch database as there will be locks on it
# This also used to run on the server but runs out of memory loading the test data

#unset AWS_SECRET_ACCESS_KEY
#unset AWS_ACCESS_KEY_ID

if [ $# -ne 1 ];then
  echo ""
  echo ""
  echo "Usage: $0 env"
  echo "e.g. $0 cobalt-test-black"
  exit 1
fi

ENV=$1

# Check this is a test type environment
if ! echo $ENV | grep -E "test|uat" > /dev/null
then
  echo ""
  echo ""
  echo "ERROR: Environment must have test or uat in the name"
  exit 1
fi

# Check we have a database for this environment
if [[ "$ENV" == "cobalt-test-black" ]];then
    RDS_HOSTNAME="cobalt-test.c97jawiow7ed.ap-southeast-2.rds.amazonaws.com"
elif [[ "$ENV" == "cobalt-uat-yellow" ]];then
    RDS_HOSTNAME="cobalt-test.c97jawiow7ed.ap-southeast-2.rds.amazonaws.com"
else
  echo "Unknown environment. Update script with database details"
  exit 1
fi

# Update the firewall rule so we can connect if local IP had changed
IP=$(curl -s https://ident.me)

echo "Your IP is $IP"

aws ec2 modify-security-group-rules \
    --group-id sg-e6b3fd98 \
    --security-group-rules SecurityGroupRuleId=sgr-0c304f0cc65379e9c,SecurityGroupRule="{Description='Dynamic',IpProtocol=-1,CidrIpv4=$IP/32}" >/dev/null


# Get current database
echo "Getting current settings..."
DBNAME=$(eb printenv "$ENV" | grep RDS_DB_NAME | awk '{print $3}')

# We use blue/green or yellow/orange. Default to green if not found
if [ "$DBNAME" == "green" ]; then
  NEW_DBNAME="blue"
elif [ "$DBNAME" == "blue" ]; then
  NEW_DBNAME="green"
elif [ "$DBNAME" == "yellow" ]; then
  NEW_DBNAME="orange"
elif [ "$DBNAME" == "orange" ]; then
  NEW_DBNAME="yellow"
else
  NEW_DBNAME="green"
fi

echo "Current RDS_DB_NAME is $DBNAME, new RDS_DB_NAME will be $NEW_DBNAME"

# Create new database
echo "Creating new database..."
eb ssh $ENV --command "-f sudo /var/app/current/utils/cgit/tools/eb_create_test_db.sh $NEW_DBNAME"

# Update elastic beanstalk settings
echo "Updating Elastic Beanstalk for $ENV..."
eb use $ENV
eb setenv RDS_DB_NAME=$NEW_DBNAME

# Drop old database
echo "Dropping database $DBNAME..."
eb ssh $ENV --command "-f sudo /var/app/current/utils/cgit/tools/eb_drop_test_db.sh $DBNAME"

# Build test data

# get user from EB
echo "Getting user for database..."
RDS_USERNAME=$(eb printenv "$ENV" | grep RDS_USERNAME | awk '{print $3}')
echo "User is $RDS_USERNAME"
export RDS_USERNAME

# get password from EB
echo "Getting password for database..."
RDS_PASSWORD=$(eb printenv "$ENV" | grep RDS_PASSWORD | awk '{print $3}')
echo "Password is $RDS_PASSWORD"
export RDS_PASSWORD

echo "Running commands to load data..."
export RDS_DB_NAME=$NEW_DBNAME
export RDS_HOSTNAME
export RDS_PORT=5432
utils/aws/rebuild_test_database_subcommands.sh