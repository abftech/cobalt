#!/bin/bash

# about: complete work on a branch, check code in and update Test

# provide any parameter to prevent releasing to test system as well

source utils/cgit/_cgit_include_vars

BRANCH=$(git branch --show-current)

  # Check if release notes have been changed
  if ! git diff --name-only "$BRANCH" develop | grep utils/views/release_notes.py >/dev/null
  then
    echo ""
    echo "Release notes have not been changed."
    echo "Cancel now and edit release_notes/release_notes.py to fix this"
    printf "${YELLOW}Cancel merging to develop?${NC}"
    read -r -p " [Y/n] " response

    if [ "$response" == "" ]
    then
      response="Y"
     fi

    if [[ "$response" =~ [yY] ]]
    then
      git checkout "$BRANCH"
      exit 1
    fi
  fi

echo ""
echo ""
echo "Congratulations on finishing a feature."
echo ""
echo "I will check your branch is clean and then merge your changes into"
echo "the develop branch. I will then deploy to the test system"
echo "and if that works, delete the branch '$BRANCH'."
echo ""
read -p "Press key to continue..." -n1 -s

if [[ -z $(git status -s) ]]
then
  echo ""
  echo ""
  echo "Checking out develop branch..."
  echo ""

  git checkout develop
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pulling latest develop branch..."
  echo ""

  git pull origin develop
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Merging $BRANCH into develop branch..."
  echo ""

  git merge $BRANCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pushing develop branch to github..."
  echo ""

  git push origin develop
  if [ $? -ne 0 ];then
   exit 1
  fi

# Quit if parameter was passed
  if [ "$#" -eq 1 ]; then
    exit
  fi

  echo ""
  echo "Deploying to test server..."
  echo ""

# Remove * if this is default env for eb
  TESTENV=`eb list | grep $CGIT_ENV-test | tr \* " "`
  TESTNUM=`eb list | grep $CGIT_ENV-test | wc | awk '{print $1}'`

  if [ "$TESTNUM" = "1" ]
  then
   echo "Deploying code to $TESTENV..."
   DATE=$(date '+%a_%d/%m/%Y_%H:%M:%S')
   eb deploy -m "develop@$DATE" $TESTENV
  else
   echo "Cannot deploy to Test, found more than one test environment."
   echo $TESTENV
  fi
  echo ""
  echo ""
else
  echo ""
  echo ""
  echo "Cannot comply with request."
  echo "You can probably fix this by running cgi_test_save."
  echo "There are uncommitted changes or other problems with your git status. See below."
  echo ""
  echo ""
  git status
  echo ""
  echo ""
  exit
fi

echo "Putting you back onto $BRANCH"
git checkout "$BRANCH"

#echo "Deleting branch $BRANCH..."
#echo ""
#
#git branch -d $BRANCH
#git push -d origin $BRANCH
