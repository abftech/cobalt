#!/bin/bash

# Branch for a hotfix will be something like 1.2.3=hotflix=fix_the_bugs
# The release branch associated with this will be release/1.2.3

BRANCH=$(git branch --show-current)

if [[ $BRANCH != *"=HOTFIX="* ]]; then
  echo ""
  echo ""
  echo "You are not on a hotfix branch. Your branch is $BRANCH."
  echo ""
  echo ""
  exit 1
fi

RELEASE=$(echo $BRANCH|cut -d= -f1)
PATCH=$(echo $BRANCH|cut -d= -f3)

echo ""
echo ""
echo "Congratulations on finishing a hotfix."
echo ""
echo "MAKE SURE YOU RUN cgit_prod_preview before deploying this."
echo ""
echo "I will check your branch is clean and then copy your changes into both release/$RELEASE"
echo "and release/$RELEASE/$PATCH. The later being a point in time snapshot of what was installed."
echo ""
echo "I will then deploy to the PRODUCTION system and update develop and master."
echo ""
echo "I will not delete the branch '$BRANCH' as this is likely installed in test or UAT."
echo "You should delete this branch later using [some command yet to be built]."
echo ""
echo "The release I will be updating is $RELEASE"
echo ""
read -p "Press key to continue..." -n1 -s

if [[ -z $(git status -s) ]]
then
  echo ""
  echo ""
  echo "Checking we have the latest version of this branch [$BRANCH]..."
  echo ""

  git pull origin $BRANCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo "Updating release/$RELEASE..."

  echo "Checking out release/$RELEASE..."
  git checkout release/$RELEASE
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo "Pulling release/$RELEASE..."
  git pull origin release/$RELEASE
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo "Merging $BRANCH..."
  git merge $BRANCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pushing release/$RELEASE to github..."
  echo ""

  git push origin release/$RELEASE
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo "Creating copy of $BRANCH as release patch branch [release/$RELEASE/$PATCH]..."

  git checkout -b release/$RELEASE/$PATCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pushing release/$RELEASE/$PATCH branch to github..."
  echo ""

  git push origin release/$RELEASE/$PATCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Deploying to PRODUCTION server..."
  echo ""

  PRODENV=$(eb list | grep cobalt-prod)

  echo "Deploying code to $PRODENV from release/$RELEASE/$PATCH..."
  DATE=$(date '+%Y.%m.%d:%H:%M')
  eb deploy -m "release/$RELEASE/$PATCH@$DATE" $PRODENV
  echo ""

  echo ""
  echo "Checking out develop..."
  echo ""

  git checkout develop
  if [ $? -ne 0 ];then
   exit 1
  fi

  git pull origin develop
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Merging release/$RELEASE/$PATCH into develop..."
  echo ""

  git merge release/$RELEASE/$PATCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pushing develop to github..."
  echo ""

  git push origin develop
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Checking out master..."
  echo ""

  git checkout master
  if [ $? -ne 0 ];then
   exit 1
  fi

  git pull origin master
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Merging develop into master..."
  echo ""

  git merge develop
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pushing master to github..."
  echo ""

  git push origin master
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo "#######################"
  echo "#                     #"
  echo "#        DONE         #"
  echo "#                     #"
  echo "#######################"

else
  echo ""
  echo ""
  echo "Cannot comply with request."
  echo "There are uncommitted changes or other problems with your git status. See below."
  echo ""
  echo ""
  git status
  echo ""
  echo ""
  exit
fi
