#!/usr/bin/env python

# about: reads a models.py file and generates some of a corresponding admin.py file

""" Reads a models.py file and generates some of a corresponding admin.py file.

    Anything used as a foreign key needs to have a search_fields=[] entry. We don't generate that.

    This is a helper, it will not generate perfect code.

    We will generate admin entries for any class we find, some will be abstract or not database related.

"""
import re
import sys
from pathlib import Path

from django.utils.datetime_safe import datetime

if len(sys.argv) != 2:
    print(f"\n\nUsage: {sys.argv[0]} <app>/models.py\n")
    sys.exit()

# Start by generating suggested foreign key searches
search_needed = []

for path in Path(".").rglob("models.py"):
    with open(path) as model_file:
        contents = model_file.readlines()
        as_one_line = "".join(contents)
        for match in re.finditer(r"ForeignKey\((.*),", as_one_line):
            used_as_foreign_key = match.group().split("(")[1].split(",")[0]
            if used_as_foreign_key not in search_needed:
                search_needed.append(used_as_foreign_key)

print()
print(
    "These fields are used as foreign keys and need to have search_fields=[] in their admin.py files:"
)
for search_needed_item in search_needed:
    print("-", search_needed_item)
print()
print()

# Read file and load in class and Foreign key definitions

classes = {}
this_list = []
last_class = None

with open(sys.argv[1]) as file:
    for line in file:
        if line.find("class") == 0:
            # Found a class, close off last class if we had one
            if last_class:
                classes[last_class] = this_list
            this_list = []
            # Get class name from class ThisClass(models.Model):
            last_class = line.split("(")[0].split(" ")[1].strip()

        if line.find(".ForeignKey(") >= 0:
            # Found a foreign key, add to list
            foreign_key = line.split("=")[0].strip()
            this_list.append(foreign_key)

    # Handle last one
    classes[last_class] = this_list

# Now generate admin.py file

print(f'""" Generated by {sys.argv[0]} on {datetime.now()} """')
print()

# Imports
print("from django.contrib import admin")
line = "from .models import "

for class_name in classes:
    line += f"{class_name}, "

# Drop last comma and space
print(line[:-2])

print()

# Admin classes

for class_name, foreign_keys in classes.items():
    if classes[class_name]:
        print()
        print(f"class {class_name}Admin(admin.ModelAdmin):")
        print(f'    """ Admin class for model {class_name} """')
        print()
        print("    autocomplete_fields = [", end="")
        for foreign_key in foreign_keys:
            print(f'"{foreign_key}", ', end="")
        print("]")
        print()

# Register commands
print()

for class_name, value in classes.items():
    if value:
        print(f"admin.site.register({class_name}, {class_name}Admin)")
    else:
        print(f"admin.site.register({class_name})")
