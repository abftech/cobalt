#!/bin/bash

# about: runs integration tests. --show --coverage --debug --module [module]

# Get arguments
SHOW=0
COVERAGE=0
MODULE=0
DEBUG_WEB=0

while [[ $# -gt 0 ]]; do
  case $1 in
    -s|--show)
      SHOW=1
      shift # past argument
      ;;
    -d|--debug)
      DEBUG_WEB=1
      shift # past argument
      ;;
    -c|--coverage)
      COVERAGE=1
      shift # past argument
      ;;
    -m|--module)
      MODULE="$2"
      shift # past argument
      shift # past value
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

# Variables
PORT=8088
export RDS_DB_NAME=test
export DUMMY_DATA_COUNT=1
export DEBUG=OFF

# Kill manage.py if running
lsof -i tcp:$PORT | awk 'NR!=1 {print $2}' | xargs kill

# Kill stripe if running
pkill -TERM -f stripe

# Kill old chromedrivers
pkill -TERM -f chromedriver

# Get timestamp of most recent migration
LAST_MIGRATION=$(ls -l -D "%Y-%m-%d=%H:%M" */migrations/*.py | sort -k6 | tail -1 | awk '{print $6}')

# Get timestamp of database
DATABASE_TIME=$(ls -l -D "%Y-%m-%d=%H:%M" ~/test.db | tail -1 | awk '{print $6}')

# If there have been migrations since the database was created, then rebuild it
if [[ "$LAST_MIGRATION" > "$DATABASE_TIME" ]]; then
  cgit_dev_test_reload_db
fi

# Reload database
cat << EOF > /tmp/drop_db
\c postgres
drop database IF EXISTS $RDS_DB_NAME;
create database $RDS_DB_NAME with owner $CGIT_ENV;
EOF

psql test </tmp/drop_db
psql test < ~/test.db >/dev/null

# Start Stripe and Django in terminal windows
open utils/cgit/tools/test_stripe_short.terminal

# To debug we want to run pycharm so don't start the server here
if [ "$DEBUG_WEB" == "0" ]; then
  open utils/cgit/tools/test_manage_short.terminal
  echo "Waiting for Webserver to start..."
else
  echo "Debugging enabled. Please start your webserver"
fi

# Wait for port to be open
while ! nc -z 127.0.0.1 $PORT; do
  sleep 0.1
done
echo "Starting..."

# Build run command
COMMAND=""

if [ $COVERAGE -eq 1 ]
  then
    COMMAND="coverage run -p"
fi

COMMAND="$COMMAND ./manage.py run_tests_integration --base_url http://127.0.0.1:$PORT"

if [ $SHOW -ne 1 ]
  then
    COMMAND="$COMMAND --headless true"
fi

if [ "$MODULE" != "0" ]
  then
    COMMAND="$COMMAND --single_test $MODULE"
fi

# run it
echo "Running: $COMMAND"
$COMMAND

# Stop the django server
lsof -i tcp:$PORT | awk 'NR!=1 {print $2}' | xargs kill -SIGINT
# Give it one second or will still be running when we close the terminal app
sleep 1

echo ""
echo "Django server output is in /tmp/test_manager.txt"

# Kill stripe if running
pkill -TERM -f stripe

# Close down Terminal
osascript -e 'tell application "Terminal" to quit'

# Show results
open /tmp/test-output.html